#!/bin/bash

# Initialize variables
DOMAIN_FILE=""
WORDLIST=""
OUTPUT_FILE="autoffuf_result.txt"

# Parse command-line options
while getopts "d:w:" opt; do
  case ${opt} in
    d ) DOMAIN_FILE="$OPTARG" ;;
    w ) WORDLIST="$OPTARG" ;;
    \? ) echo "Usage: $0 -d <domain_file> -w <wordlist_file>"
         exit 1 ;;
  esac
done

# Check if both the domain file and wordlist file are provided
if [[ -z "$DOMAIN_FILE" || -z "$WORDLIST" ]]; then
  echo "Usage: $0 -d <domain_file> -w <wordlist_file>"
  exit 1
fi

# Check if the domain file exists
if [[ ! -f "$DOMAIN_FILE" ]]; then
  echo "Error: Domain file '$DOMAIN_FILE' not found!"
  exit 1
fi

# Check if the wordlist file exists
if [[ ! -f "$WORDLIST" ]]; then
  echo "Error: Wordlist file '$WORDLIST' not found!"
  exit 1
fi

# Prepare the output file
echo "FFUF Results" > "$OUTPUT_FILE"
echo "=====================" >> "$OUTPUT_FILE"

# Loop through each domain in the file
while read -r domain; do
  if [[ -n "$domain" ]]; then
    # Remove trailing slash from the domain if it exists
    domain=$(echo "$domain" | sed 's:/*$::')
    echo "Running ffuf on domain: $domain"
    
    # Run ffuf with JSON output, suppressing all non-result output
    ffuf -u "$domain/FUZZ" -w "$WORDLIST" -fc 302,404,403,401,500,301 -o temp_output.json -of json 2>/dev/null
    
    # Process the results
    jq -r '.results[] | "\(.url)"' temp_output.json | while read -r url; do
      # Print the URL in green
      echo -e "\033[0;32m$url\033[0m"
      # Save the URL to the output file
      echo "$url" >> "$OUTPUT_FILE"
    done
  fi
done < "$DOMAIN_FILE"

# Clean up temporary file
rm -f temp_output.json

echo "Results saved to $OUTPUT_FILE"
